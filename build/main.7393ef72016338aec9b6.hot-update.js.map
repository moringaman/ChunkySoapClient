{"version":3,"file":"main.7393ef72016338aec9b6.hot-update.js","sources":["webpack:///./src/helpers/api.js"],"sourcesContent":["// import { fn } from '.';\nconst promiseRetry = require('promise-retry')\n\nexport default {\n  /**\n   * ( uses fetch to make authorized api requests )\n   *\n   * @param {*} url\n   * @param {*} method\n   * @param {*} data\n   * @returns\n   */\n  async send(url, method, data, type = \"protected\") {\n    // const apiAddress = process.env.RAZZLE_API_URI \n    const apiAddress = process.env.NODE_ENV === 'production' ? process.env.RAZZLE_API_URI : \"http://localhost:1337\";\n    // fn.getApiAddress()\n    const token = await JSON.parse(sessionStorage.getItem(\"jwtToken\"));\n    // await fn.getTokenFromStorage('sessionToken')\n    console.log(\"TOKEN \", token);\n    const baseURL = `${apiAddress}`;\n    let myHeaders = new Headers();\n    myHeaders.append(\"Content-Type\", \"application/json\");\n    if (token !== \"\" && type !== \"public\") {\n      myHeaders.append(\"Authorization\", `Bearer ${token}`);\n    }\n\n    var raw = JSON.stringify(data);\n    console.log(\"raw data \", raw);\n    var requestOptions = {\n      method: method,\n      headers: myHeaders,\n      body: raw,\n      redirect: \"follow\",\n    };\n\n    // promiseRetry(function(retry, number) {\n    //   console.log(\"attempt No. \", number)\n\n    return fetch(`${baseURL}${url}`, requestOptions)\n      .then((response) => {\n        console.log(\"fetch response \", response);\n        return response.json();\n      })\n      .then((result) => {\n        console.log(\"reftch result \", result);\n        return result;\n      })\n      .catch(error => {\n      console.log(\"error\", error)\n      }\n      );\n\n    // })\n\n  },\n};\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;;;;;;;;AAQA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAHA;AAAA;AACA;AADA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAQA;AACA;AAzBA;AA4BA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAtCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA0CA;AAnDA;;;;A","sourceRoot":""}